{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/joduplessis/Work/Weekday/polls/pages/update.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useRouter, withRouter } from 'next/router';\nimport Head from 'next/head';\nimport fetch from 'isomorphic-unfetch';\nimport { Button, Error, Loading, Notification, Spinner } from '@weekday/elements';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport withData from '../config';\nimport PollComponent from '../components/poll.component';\nimport FormComponent from '../components/form.component';\n\nfunction Update(props) {\n  const {\n    0: query,\n    1: setQuery\n  } = useState(null);\n  const {\n    0: userId,\n    1: setUserId\n  } = useState('');\n  const {\n    0: channelId,\n    1: setChannelId\n  } = useState('');\n  const {\n    0: pollId,\n    1: setPollId\n  } = useState(null);\n  useEffect(() => {\n    // const { router: { query: { payload } }} = props;\n    const payload = btoa(_JSON$stringify({\n      pollId: 1,\n      userId: '5db7e3c98476242154d43181',\n      channelId: '5db87f04db059a6d8dc8d068'\n    }));\n    const parsedPayload = JSON.parse(atob(payload));\n    setUserId(parsedPayload.userId);\n    setPollId(parsedPayload.pollId);\n    setChannelId(parsedPayload.channelId);\n    setQuery(gql`\n    \tquery {\n    \t  polls(where: { id: { _eq: ${pollId} } }) {\n    \t    id\n    \t    title\n          description\n          user_id\n          channel_id\n          expiry\n          questions\n          answers {\n            user_id\n          }\n    \t  }\n    \t}\n    `);\n  }, []);\n  return __jsx(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    className: \"jsx-1390389061\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Polls\"), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"initial-scale=1.0, width=device-width\",\n    className: \"jsx-1390389061\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), __jsx(\"link\", {\n    href: \"/static/css/styles.css\",\n    rel: \"stylesheet\",\n    className: \"jsx-1390389061\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), __jsx(\"link\", {\n    href: \"/static/images/favicon.png\",\n    rel: \"shortcut icon\",\n    className: \"jsx-1390389061\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), __jsx(_JSXStyle, {\n    id: \"1390389061\",\n    __self: this\n  }, \"*{margin:0px;padding:0px;}body{background:white;}.container{background:white;width:100%;height:100%;position:absolute;left:0px;top:0px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:stretch;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;-webkit-align-content:center;-ms-flex-line-pack:center;align-content:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}.error{position:absolute;top:0px;left:0px;width:100%;}.polls-listing-container{-webkit-flex:1;-ms-flex:1;flex:1;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-align-content:center;-ms-flex-line-pack:center;align-content:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;padding:20px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb2R1cGxlc3Npcy9Xb3JrL1dlZWtkYXkvcG9sbHMvcGFnZXMvdXBkYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9EeUIsQUFHc0IsQUFLTSxBQUlBLEFBYUMsQUFPWCxXQTVCSyxNQUtkLEFBSWEsQ0FhSCxLQXJCVixHQXNCVyxFQWJHLEtBbUJDLEVBTEYsS0FiTyxNQWNwQixZQWJXLFNBQ0QsUUFDSyxnQ0FnQlMsMENBZkYsb0NBZ0JELDZEQWZFLGdDQWdCQSw0Q0FmRSxnQ0FnQkksbUVBZjdCLHNDQWdCZSxhQUNmIiwiZmlsZSI6Ii9Vc2Vycy9qb2R1cGxlc3Npcy9Xb3JrL1dlZWtkYXkvcG9sbHMvcGFnZXMvdXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVJvdXRlciwgd2l0aFJvdXRlciB9IGZyb20gJ25leHQvcm91dGVyJ1xuaW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJ1xuaW1wb3J0IGZldGNoIGZyb20gJ2lzb21vcnBoaWMtdW5mZXRjaCdcbmltcG9ydCB7IEJ1dHRvbiwgRXJyb3IsIExvYWRpbmcsIE5vdGlmaWNhdGlvbiwgU3Bpbm5lciB9IGZyb20gJ0B3ZWVrZGF5L2VsZW1lbnRzJ1xuaW1wb3J0IGdxbCBmcm9tICdncmFwaHFsLXRhZydcbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSAncmVhY3QtYXBvbGxvJ1xuaW1wb3J0IHdpdGhEYXRhIGZyb20gJy4uL2NvbmZpZydcbmltcG9ydCBQb2xsQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudHMvcG9sbC5jb21wb25lbnQnXG5pbXBvcnQgRm9ybUNvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnRzL2Zvcm0uY29tcG9uZW50J1xuXG5mdW5jdGlvbiBVcGRhdGUocHJvcHMpIHtcbiAgY29uc3QgW3F1ZXJ5LCBzZXRRdWVyeV0gPSB1c2VTdGF0ZShudWxsKVxuICBjb25zdCBbdXNlcklkLCBzZXRVc2VySWRdID0gdXNlU3RhdGUoJycpXG4gIGNvbnN0IFtjaGFubmVsSWQsIHNldENoYW5uZWxJZF0gPSB1c2VTdGF0ZSgnJylcbiAgY29uc3QgW3BvbGxJZCwgc2V0UG9sbElkXSA9IHVzZVN0YXRlKG51bGwpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBjb25zdCB7IHJvdXRlcjogeyBxdWVyeTogeyBwYXlsb2FkIH0gfX0gPSBwcm9wcztcbiAgICBjb25zdCBwYXlsb2FkID0gYnRvYShKU09OLnN0cmluZ2lmeSh7IHBvbGxJZDogMSwgdXNlcklkOiAnNWRiN2UzYzk4NDc2MjQyMTU0ZDQzMTgxJywgY2hhbm5lbElkOiAnNWRiODdmMDRkYjA1OWE2ZDhkYzhkMDY4JyB9KSlcbiAgICBjb25zdCBwYXJzZWRQYXlsb2FkID0gSlNPTi5wYXJzZShhdG9iKHBheWxvYWQpKVxuXG4gICAgc2V0VXNlcklkKHBhcnNlZFBheWxvYWQudXNlcklkKVxuICAgIHNldFBvbGxJZChwYXJzZWRQYXlsb2FkLnBvbGxJZClcbiAgICBzZXRDaGFubmVsSWQocGFyc2VkUGF5bG9hZC5jaGFubmVsSWQpXG4gICAgc2V0UXVlcnkoZ3FsYFxuICAgIFx0cXVlcnkge1xuICAgIFx0ICBwb2xscyh3aGVyZTogeyBpZDogeyBfZXE6ICR7cG9sbElkfSB9IH0pIHtcbiAgICBcdCAgICBpZFxuICAgIFx0ICAgIHRpdGxlXG4gICAgICAgICAgZGVzY3JpcHRpb25cbiAgICAgICAgICB1c2VyX2lkXG4gICAgICAgICAgY2hhbm5lbF9pZFxuICAgICAgICAgIGV4cGlyeVxuICAgICAgICAgIHF1ZXN0aW9uc1xuICAgICAgICAgIGFuc3dlcnMge1xuICAgICAgICAgICAgdXNlcl9pZFxuICAgICAgICAgIH1cbiAgICBcdCAgfVxuICAgIFx0fVxuICAgIGApXG4gIH0sIFtdKVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPEhlYWQ+XG4gICAgICAgIDx0aXRsZT5Qb2xsczwvdGl0bGU+XG4gICAgICAgIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJpbml0aWFsLXNjYWxlPTEuMCwgd2lkdGg9ZGV2aWNlLXdpZHRoXCIgLz5cbiAgICAgICAgPGxpbmsgaHJlZj1cIi9zdGF0aWMvY3NzL3N0eWxlcy5jc3NcIiByZWw9XCJzdHlsZXNoZWV0XCIgLz5cbiAgICAgICAgPGxpbmsgaHJlZj1cIi9zdGF0aWMvaW1hZ2VzL2Zhdmljb24ucG5nXCIgcmVsPVwic2hvcnRjdXQgaWNvblwiIC8+XG4gICAgICA8L0hlYWQ+XG5cbiAgICAgIDxzdHlsZSBnbG9iYWwganN4PntgXG4gICAgICAgICoge1xuICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgIHBhZGRpbmc6IDBweDtcbiAgICAgICAgfVxuXG4gICAgICAgIGJvZHkge1xuICAgICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgLmNvbnRhaW5lciB7XG4gICAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICBsZWZ0OiAwcHg7XG4gICAgICAgICAgdG9wOiAwcHg7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogc3RyZXRjaDtcbiAgICAgICAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIH1cblxuICAgICAgICAuZXJyb3Ige1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICB0b3A6IDBweDtcbiAgICAgICAgICBsZWZ0OiAwcHg7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cblxuICAgICAgICAucG9sbHMtbGlzdGluZy1jb250YWluZXIge1xuICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24tY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICAgICAgICBwYWRkaW5nOiAyMHB4O1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG5cbiAgICAgIHtxdWVyeSAmJlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lciBjb2x1bW5cIj5cbiAgICAgICAgICA8UXVlcnlcbiAgICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICAgIGZldGNoUG9saWN5PXsnY2FjaGUtYW5kLW5ldHdvcmsnfT5cbiAgICAgICAgICAgIHsoeyBsb2FkaW5nLCBkYXRhLCBlcnJvciB9KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChsb2FkaW5nKSByZXR1cm4gPFNwaW5uZXIgLz5cbiAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJlcnJvclwiPjxFcnJvciBtZXNzYWdlPVwiRXJyb3IgbG9hZGluZyBwb2xsc1wiIC8+PC9kaXY+XG5cblxuICAgICAgICAgICAgICAvLyBJZiBubyBwb2xscyBleGlzdFxuICAgICAgICAgICAgICBpZiAoZGF0YS5wb2xscy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiLi4vc3RhdGljL2ltYWdlcy9uby1wb2xscy5wbmdcIiB3aWR0aD1cIjYwJVwiIGNsYXNzTmFtZT1cIm1iLTMwXCIvPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImgzIG1iLTIwIHBsLTIwIHByLTIwIGNvbG9yLWQyIHRleHQtY2VudGVyXCI+VGhlcmUgYXJlIG5vIHBvbGxzPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaDUgbWItMjAgcGwtMjAgcHItMjAgY29sb3ItZDAgdGV4dC1jZW50ZXJcIj5UaGVyZSBhcmUgbm8gcG9sbHMgZm9yIHRoaXMgY2hhbm5lbC4gQ2xpY2sgb24gdGhlIGJ1dHRvbiBiZWxvdyB0byBjcmVhdGUgeW91ciBmaXJzdCBwb2xsLjwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxuICAgICAgICAgICAgICAgICAgICAgIHRoZW1lPVwiYmx1ZS1ib3JkZXJcIlxuICAgICAgICAgICAgICAgICAgICAgIHRleHQ9XCJDcmVhdGUgYSBwb2xsXCJcbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlXG4gICAgICAgICAgICAgIHJldHVybiBkYXRhLnBvbGxzLm1hcCgocG9sbCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb2xscy1saXN0aW5nLWNvbnRhaW5lclwiIGtleT17aW5kZXh9PlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgIGlkPXtwb2xsLmlkfVxuICAgICAgICAgICAgICAgICAgICAgIHVzZXJJZD17cG9sbC51c2VyX2lkfVxuICAgICAgICAgICAgICAgICAgICAgIGV4cGlyeT17cG9sbC5leHBpcnl9XG4gICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e3BvbGwudGl0bGV9XG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudFVzZXJJZD17dXNlcklkfVxuICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtwb2xsLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9ucz17cG9sbC5xdWVzdGlvbnN9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIDwvUXVlcnk+XG4gICAgICAgIDwvZGl2PlxuICAgICAgfVxuICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gIClcbn1cblxuVXBkYXRlLmdldEluaXRpYWxQcm9wcyA9IChjb250ZXh0KSA9PiB7XG4gIGNvbnN0IHsgcXVlcnk6IHsgcGF5bG9hZCB9IH0gPSBjb250ZXh0O1xuXG4gIHJldHVybiB7XG4gICAgY29vbDogdHJ1ZVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhEYXRhKHdpdGhSb3V0ZXIoVXBkYXRlKSlcbiJdfQ== */\\n/*@ sourceURL=/Users/joduplessis/Work/Weekday/polls/pages/update.js */\"), query && __jsx(\"div\", {\n    className: \"jsx-1390389061\" + \" \" + \"container column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, __jsx(Query, {\n    query: query,\n    fetchPolicy: 'cache-and-network',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, ({\n    loading,\n    data,\n    error\n  }) => {\n    if (loading) return __jsx(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    });\n    if (error) return __jsx(\"div\", {\n      className: \"jsx-1390389061\" + \" \" + \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, __jsx(Error, {\n      message: \"Error loading polls\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })); // If no polls exist\n\n    if (data.polls.length == 0) {\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, __jsx(\"img\", {\n        src: \"../static/images/no-polls.png\",\n        width: \"60%\",\n        className: \"jsx-1390389061\" + \" \" + \"mb-30\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"jsx-1390389061\" + \" \" + \"h3 mb-20 pl-20 pr-20 color-d2 text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"There are no polls\"), __jsx(\"div\", {\n        className: \"jsx-1390389061\" + \" \" + \"h5 mb-20 pl-20 pr-20 color-d0 text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"There are no polls for this channel. Click on the button below to create your first poll.\"), __jsx(Button, {\n        size: \"small\",\n        theme: \"blue-border\",\n        text: \"Create a poll\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }));\n    } // If there are\n\n\n    return data.polls.map((poll, index) => {\n      return __jsx(\"div\", {\n        key: index,\n        className: \"jsx-1390389061\" + \" \" + \"polls-listing-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, __jsx(FormComponent, {\n        id: poll.id,\n        userId: poll.user_id,\n        expiry: poll.expiry,\n        title: poll.title,\n        currentUserId: userId,\n        description: poll.description,\n        questions: poll.questions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }));\n    });\n  })));\n}\n\nUpdate.getInitialProps = context => {\n  const {\n    query: {\n      payload\n    }\n  } = context;\n  return {\n    cool: true\n  };\n};\n\nexport default withData(withRouter(Update));","map":{"version":3,"sources":["/Users/joduplessis/Work/Weekday/polls/pages/update.js"],"names":["React","useState","useEffect","useRouter","withRouter","Head","fetch","Button","Error","Loading","Notification","Spinner","gql","Query","withData","PollComponent","FormComponent","Update","props","query","setQuery","userId","setUserId","channelId","setChannelId","pollId","setPollId","payload","btoa","parsedPayload","JSON","parse","atob","loading","data","error","polls","length","map","poll","index","id","user_id","expiry","title","description","questions","getInitialProps","context","cool"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useRouter, withRouter } from 'next/router'\nimport Head from 'next/head'\nimport fetch from 'isomorphic-unfetch'\nimport { Button, Error, Loading, Notification, Spinner } from '@weekday/elements'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport withData from '../config'\nimport PollComponent from '../components/poll.component'\nimport FormComponent from '../components/form.component'\n\nfunction Update(props) {\n  const [query, setQuery] = useState(null)\n  const [userId, setUserId] = useState('')\n  const [channelId, setChannelId] = useState('')\n  const [pollId, setPollId] = useState(null)\n\n  useEffect(() => {\n    // const { router: { query: { payload } }} = props;\n    const payload = btoa(JSON.stringify({ pollId: 1, userId: '5db7e3c98476242154d43181', channelId: '5db87f04db059a6d8dc8d068' }))\n    const parsedPayload = JSON.parse(atob(payload))\n\n    setUserId(parsedPayload.userId)\n    setPollId(parsedPayload.pollId)\n    setChannelId(parsedPayload.channelId)\n    setQuery(gql`\n    \tquery {\n    \t  polls(where: { id: { _eq: ${pollId} } }) {\n    \t    id\n    \t    title\n          description\n          user_id\n          channel_id\n          expiry\n          questions\n          answers {\n            user_id\n          }\n    \t  }\n    \t}\n    `)\n  }, [])\n\n  return (\n    <React.Fragment>\n      <Head>\n        <title>Polls</title>\n        <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n        <link href=\"/static/css/styles.css\" rel=\"stylesheet\" />\n        <link href=\"/static/images/favicon.png\" rel=\"shortcut icon\" />\n      </Head>\n\n      <style global jsx>{`\n        * {\n          margin: 0px;\n          padding: 0px;\n        }\n\n        body {\n          background: white;\n        }\n\n        .container {\n          background: white;\n          width: 100%;\n          height: 100%;\n          position: absolute;\n          left: 0px;\n          top: 0px;\n          display: flex;\n          align-items: stretch;\n          align-content: center;\n          justify-content: center;\n        }\n\n        .error {\n          position: absolute;\n          top: 0px;\n          left: 0px;\n          width: 100%;\n        }\n\n        .polls-listing-container {\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          align-content: center;\n          justify-content: flex-start;\n          padding: 20px;\n        }\n      `}</style>\n\n      {query &&\n        <div className=\"container column\">\n          <Query\n            query={query}\n            fetchPolicy={'cache-and-network'}>\n            {({ loading, data, error }) => {\n              if (loading) return <Spinner />\n              if (error) return <div className=\"error\"><Error message=\"Error loading polls\" /></div>\n\n\n              // If no polls exist\n              if (data.polls.length == 0) {\n                return (\n                  <React.Fragment>\n                    <img src=\"../static/images/no-polls.png\" width=\"60%\" className=\"mb-30\"/>\n                    <div className=\"h3 mb-20 pl-20 pr-20 color-d2 text-center\">There are no polls</div>\n                    <div className=\"h5 mb-20 pl-20 pr-20 color-d0 text-center\">There are no polls for this channel. Click on the button below to create your first poll.</div>\n\n                    <Button\n                      size=\"small\"\n                      theme=\"blue-border\"\n                      text=\"Create a poll\"\n                    />\n                  </React.Fragment>\n                )\n              }\n\n              // If there are\n              return data.polls.map((poll, index) => {\n                return (\n                  <div className=\"polls-listing-container\" key={index}>\n                    <FormComponent\n                      id={poll.id}\n                      userId={poll.user_id}\n                      expiry={poll.expiry}\n                      title={poll.title}\n                      currentUserId={userId}\n                      description={poll.description}\n                      questions={poll.questions}\n                    />\n                  </div>\n                )\n              })\n            }}\n          </Query>\n        </div>\n      }\n    </React.Fragment>\n  )\n}\n\nUpdate.getInitialProps = (context) => {\n  const { query: { payload } } = context;\n\n  return {\n    cool: true\n  }\n}\n\nexport default withData(withRouter(Update))\n"]},"metadata":{},"sourceType":"module"}