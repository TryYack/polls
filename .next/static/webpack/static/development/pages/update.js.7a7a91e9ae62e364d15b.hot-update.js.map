{"version":3,"file":"static/webpack/static/development/pages/update.js.7a7a91e9ae62e364d15b.hot-update.js","sources":["webpack:///./components/form.component.js","webpack:///./pages/update.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Progress, Button } from '@weekday/elements'\nimport moment from 'moment'\n\nexport default function PollComponent(props) {\n  const [complete, setComplete] = useState(false)\n  const [total, setTotal] = useState(0)\n  const [highest, setHighest] = useState(0)\n  const [expired, setExpired] = useState(0)\n\n  const answerQuestion = async (questionId) => {\n    console.log(questionId)\n    setComplete(true)\n  }\n\n  useEffect(() => {\n    let answerCount = 0\n    let answerCountHighest = 0\n\n    props.questions.map(question => {\n      // See if this user has completed the poll\n      question.answers.map(answer => {\n        if (answer.user_id == props.currentUserId) setComplete(true)\n      })\n\n      // Set the score for the highest amount of votes\n      if (question.answers.length > answerCountHighest) answerCountHighest = question.answers.length\n\n      // Incremenet the total amount of answers/voted\n      answerCount += question.answers.length\n    })\n\n    setTotal(answerCount)\n    setHighest(answerCountHighest)\n    setExpired(moment(props.expiry).isBefore(moment()))\n  }, [])\n\n  return (\n    <React.Fragment>\n      <style jsx>{`\n        .poll-container {\n          width: 100%;\n          display: flex;\n          flex-direction: column;\n          align-items: stretch;\n          align-content: center;\n          justify-content: center;\n        }\n\n        .poll-inner {\n          flex: 1;\n          flex-direction: column;\n          display: flex;\n          align-items: center;\n          align-content: center;\n          justify-content: center;\n        }\n\n        .progress-container {\n          margin-bottom: 5px;\n          width: 100%;\n        }\n      `}</style>\n\n      <div className=\"poll-container\">\n        <div className=\"poll-inner\">\n          <div className=\"h4 color-d3 text-left w-100 mb-0\">{props.title}</div>\n          <div className=\"h5 color-d0 text-left w-100 mb-10\">{props.description}</div>\n\n          {!complete && !expired &&\n            <React.Fragment>\n              {props.questions.map((question, index) => {\n                return (\n                  <div className=\"progress-container\" key={index}>\n                    <Button\n                      text={question.question}\n                      theme=\"blue-border\"\n                      size=\"full-width\"\n                      style={{ height: 35 }}\n                      onClick={() => answerQuestion(question.id)}\n                    />\n                  </div>\n                )\n              })}\n            </React.Fragment>\n          }\n\n          {(complete || expired) &&\n            <React.Fragment>\n              {props.questions.map((question, index) => {\n                const percentage = Math.floor((question.answers.length / total) * 100)\n                const color = question.answers.length >= highest ? '#e9edf2' : '#f0f2f5'\n\n                return (\n                  <div className=\"progress-container\" key={index}>\n                    <Progress\n                      percentage={percentage}\n                      color={color}\n                      text={question.question}\n                      labels={true}\n                    />\n                  </div>\n                )\n              })}\n            </React.Fragment>\n          }\n\n          <div className=\"p color-d1 text-left w-100 mt-5\">\n            {expired &&\n              <span>This poll expired {moment(props.expiry).fromNow()}</span>\n            }\n            {!expired &&\n              <span>This poll expires at {moment(props.expiry).format('LLL')}</span>\n            }\n            {props.currentUserId == props.userId &&\n              <strong className=\"button ml-10 color-blue\">Update</strong>\n            }\n            {props.currentUserId == props.userId &&\n              <strong className=\"button ml-10 color-red\">Delete</strong>\n            }\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { useRouter, withRouter } from 'next/router'\nimport Head from 'next/head'\nimport fetch from 'isomorphic-unfetch'\nimport { Button, Error, Loading, Notification, Spinner } from '@weekday/elements'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport withData from '../config'\nimport PollComponent from '../components/poll.component'\nimport FormComponent from '../components/form.component'\n\nfunction Update(props) {\n  const [query, setQuery] = useState(null)\n  const [userId, setUserId] = useState('')\n  const [channelId, setChannelId] = useState('')\n  const [pollId, setPollId] = useState(null)\n\n  useEffect(() => {\n    // const { router: { query: { payload } }} = props;\n    const payload = btoa(JSON.stringify({ pollId: 1, userId: '5db7e3c98476242154d43181', channelId: '5db87f04db059a6d8dc8d068' }))\n    const parsedPayload = JSON.parse(atob(payload))\n\n    setUserId(parsedPayload.userId)\n    setPollId(parsedPayload.pollId)\n    setChannelId(parsedPayload.channelId)\n    setQuery(gql`\n    \tquery {\n    \t  polls(where: { id: { _eq: ${pollId} } }) {\n    \t    id\n    \t    title\n          description\n          user_id\n          channel_id\n          expiry\n          questions {\n            id\n            question\n            answers {\n              user_id\n            }\n          }\n    \t  }\n    \t}\n    `)\n  }, [])\n\n  return (\n    <React.Fragment>\n      <Head>\n        <title>Polls</title>\n        <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n        <link href=\"/static/css/styles.css\" rel=\"stylesheet\" />\n        <link href=\"/static/images/favicon.png\" rel=\"shortcut icon\" />\n      </Head>\n\n      <style global jsx>{`\n        * {\n          margin: 0px;\n          padding: 0px;\n        }\n\n        body {\n          background: white;\n        }\n\n        .container {\n          background: white;\n          width: 100%;\n          height: 100%;\n          position: absolute;\n          left: 0px;\n          top: 0px;\n          display: flex;\n          align-items: stretch;\n          align-content: center;\n          justify-content: center;\n        }\n\n        .error {\n          position: absolute;\n          top: 0px;\n          left: 0px;\n          width: 100%;\n        }\n\n        .polls-listing-container {\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          align-content: center;\n          justify-content: flex-start;\n          padding: 20px;\n        }\n      `}</style>\n\n      {query &&\n        <div className=\"container column\">\n          <Query\n            query={query}\n            fetchPolicy={'cache-and-network'}>\n            {({ loading, data, error }) => {\n              if (loading) return <Spinner />\n              if (error) return <div className=\"error\"><Error message=\"Error loading polls\" /></div>\n\n\n              // If no polls exist\n              if (data.polls.length == 0) {\n                return (\n                  <React.Fragment>\n                    <img src=\"../static/images/no-polls.png\" width=\"60%\" className=\"mb-30\"/>\n                    <div className=\"h3 mb-20 pl-20 pr-20 color-d2 text-center\">There are no polls</div>\n                    <div className=\"h5 mb-20 pl-20 pr-20 color-d0 text-center\">There are no polls for this channel. Click on the button below to create your first poll.</div>\n\n                    <Button\n                      size=\"small\"\n                      theme=\"blue-border\"\n                      text=\"Create a poll\"\n                    />\n                  </React.Fragment>\n                )\n              }\n\n              // If there are\n              return data.polls.map((poll, index) => {\n                return (\n                  <div className=\"polls-listing-container\" key={index}>\n                    <Form\n                      expiry={poll.expiry}\n                      title={poll.title}\n                      userId={poll.user_id}\n                      currentUserId={userId}\n                      description={poll.description}\n                      questions={poll.questions}\n                    />\n                  </div>\n                )\n              })\n            }}\n          </Query>\n        </div>\n      }\n    </React.Fragment>\n  )\n}\n\nUpdate.getInitialProps = (context) => {\n  const { query: { payload } } = context;\n\n  return {\n    cool: true\n  }\n}\n\nexport default withData(withRouter(Update))\n"],"mappings":"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","sourceRoot":""}