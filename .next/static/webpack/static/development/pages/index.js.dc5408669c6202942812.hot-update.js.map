{"version":3,"file":"static/webpack/static/development/pages/index.js.dc5408669c6202942812.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useRouter, withRouter } from 'next/router'\nimport Head from 'next/head'\nimport fetch from 'isomorphic-unfetch'\nimport { Button, Error, Loading, Notification, Spinner } from '@weekday/elements'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport withData from '../config'\nimport PollComponent from '../components/poll.component'\nimport { useMutation, useSubscription } from '@apollo/react-hooks'\n\nconst DELETE_POLL = gql`\n  mutation delete_polls($id: Int) {\n    delete_polls(\n      where: {id: {_eq: $id}}\n    ) {\n      affected_rows\n    }\n  }\n`;\n\nconst UPDATE_POLL = gql`\n  mutation update_polls($id: Int, $changes: polls_set_input) {\n    update_polls(\n      where: {id: {_eq: $id}},\n      _set: $changes\n    ) {\n      affected_rows\n      returning {\n        id\n        title\n        description\n      }\n    }\n  }\n`;\n\nconst ADD_POLL = gql`\n  mutation add_poll($objects: [polls_insert_input!]!) {\n    insert_polls(objects: $objects) {\n      returning {\n        id\n        title\n      }\n    }\n  }\n`;\n\nfunction Index(props) {\n  const { router: { query: { payload } }} = props\n  const decodedPayload = decodeURI(payload)\n  const jsonPayload = JSON.parse(decodedPayload)\n  /*\n  console.log(jsonPayload)\n  console.log(\n    encodeURI(\n        JSON.stringify(\n          { userId: '5db7e3c98476242154d43181', channelId: '5db87f04db059a6d8dc8d068' }\n        )\n      )\n  )\n  */\n  const [userId, setUserId] = useState(jsonPayload.userId)\n  const [channelId, setChannelId] = useState(jsonPayload.channelId)\n  const [addPoll, addData] = useMutation(ADD_POLL)\n  const [updatePoll, updateData] = useMutation(UPDATE_POLL)\n  const [deletePoll, deleteData] = useMutation(DELETE_POLL)\n  const { loading, error, data } = useSubscription(gql`\n    subscription {\n      polls(where: { channel_id: { _eq: \"${channelId}\" } }) {\n        id\n        title\n        description\n        user_id\n        channel_id\n        expiry\n        questions\n        answers {\n          question_id\n          user_id\n        }\n      }\n    }\n  `)\n\n  return (\n    <React.Fragment>\n      <Head>\n        <title>Polls</title>\n        <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n        <link href=\"/static/css/styles.css\" rel=\"stylesheet\" />\n        <link href=\"/static/images/favicon.png\" rel=\"shortcut icon\" />\n      </Head>\n\n      <style global jsx>{`\n        * {\n          margin: 0px;\n          padding: 0px;\n        }\n\n        body {\n          background: white;\n        }\n\n        .container {\n          background: white;\n          width: 100%;\n          height: 100%;\n          position: absolute;\n          left: 0px;\n          top: 0px;\n          display: flex;\n          align-items: stretch;\n          align-content: center;\n          justify-content: center;\n        }\n\n        .error {\n          position: absolute;\n          top: 0px;\n          left: 0px;\n          width: 100%;\n        }\n\n        .polls-listing-container {\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          align-content: center;\n          justify-content: flex-start;\n          padding: 20px;\n        }\n      `}</style>\n\n      <div className=\"container column\">\n        <div className=\"polls-listing-container\">\n          {(loading || !data) && <Spinner />}\n          {(error || !data) && <div className=\"error\"><Error message=\"Error loading polls\" /></div>}\n          {data &&\n            <React.Fragment>\n              {(data.polls.length == 0) &&\n                <React.Fragment>\n                  <img src=\"../static/images/no-polls.png\" width=\"60%\" className=\"mb-30\"/>\n                  <div className=\"h3 mb-20 pl-20 pr-20 color-d2 text-center\">There are no polls</div>\n                  <div className=\"h5 mb-20 pl-20 pr-20 color-d0 text-center\">There are no polls for this channel. Click on the button below to create your first poll.</div>\n                </React.Fragment>\n              }\n\n              {data.polls.map((poll, index) => {\n                return (\n                  <PollComponent\n                    key={index}\n                    expiry={poll.expiry}\n                    title={poll.title}\n                    userId={poll.user_id}\n                    currentUserId={userId}\n                    description={poll.description}\n                    questions={poll.questions || []}\n                    answers={poll.answers || []}\n                  />\n                )\n              })}\n            </React.Fragment>\n          }\n\n          <div className=\"row justify-content-center mt-30 w-100\">\n            <Button\n              size=\"small\"\n              theme=\"blue-border\"\n              text=\"Create a poll\"\n              onClick={() => addPoll({ variables: { objects: [{ title: 'cool', description: 'Nice', questions: {id: 1, text: 'Sweetness'}, channel_id, user_id }] } })}\n              className=\"mr-10\"\n            />\n            <Button\n              size=\"small\"\n              theme=\"blue-border\"\n              text=\"Delete a poll\"\n              onClick={() => deletePoll({ variables: { id: 3 } })}\n              className=\"mr-10\"\n            />\n            <Button\n              size=\"small\"\n              theme=\"blue-border\"\n              text=\"Update a poll\"\n              onClick={() => updatePoll({ variables: { id: 1, changes: { title: 'Updated....' } } })}\n            />\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n\nIndex.getInitialProps = (context) => {\n  const { query: { payload } } = context;\n\n  return {\n    cool: true\n  }\n}\n\nexport default withData(withRouter(Index))\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAgBA;AACA;AAUA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAoCA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAiDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAAA;AAGA;AACA;AADA;AAGA;AACA;AACA;;;;A","sourceRoot":""}